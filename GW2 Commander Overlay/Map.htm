<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.5/leaflet.css" />
    <style type="text/css">
        .leaflet-container
        {
            background: #000000;
        }
        
        #map
        {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
        }
        .label
        {
            background: rgba(0,0,0,0);
            width: auto;
            height: 20px;
        }
    </style>
    <script src="http://cdn.leafletjs.com/leaflet-0.5/leaflet.js"></script>
    <script src="JQUERYSCRIPTHERE"></script>
    <script src="CHARTMARKERSHERE"></script>
    <script>

        var debugMarker = null;
        var mapData = new Array();
        var playerMarkers = new Array();
        var rangeMarkers = new Array();
        var siegeRangeMarkers = new Array();
        var objectiveMarkers = new Array();
        var timerMarkers = new Array();
        var timerMarkerIcons = new Array();
        var waypointMarkers = new Array();
        var CurrentPlayerPosX = 0;
        var CurrentPlayerPosY = 0;
        var CurrentPlayerName = '-';

        var mapScores = new Array();

        var centerOnPlayer = false;
        var panToCenter = true;
        var currentMap = 0;
        var gameToMapRatio = 39.3701

        var map = null;

        var playerIcon = L.Icon.extend({
            options: {
                iconUrl: "PLAYERICONHERE",
                iconSize: [16, 16],
                iconAnchor: [8, 8]
            }
        });

        var mePlayerIcon = L.Icon.extend({
            options: {
                iconUrl: "PLAYERMEICONHERE",
                iconSize: [16, 16],
                iconAnchor: [8, 8]
            }
        });

        var playerHavocIcon = L.Icon.extend({
            options: {
                iconUrl: "PLAYERHAVOCICONHERE",
                iconSize: [16, 16],
                iconAnchor: [8, 8]
            }
        });

        var playerScoutIcon = L.Icon.extend({
            options: {
                iconUrl: "PLAYERSCOUTICONHERE",
                iconSize: [16, 16],
                iconAnchor: [8, 8]
            }
        });

        var playerRemovedIcon = L.Icon.extend({
            options: {
                iconUrl: "PLAYERREMOVEDICONHERE",
                iconSize: [16, 16],
                iconAnchor: [8, 8]
            }
        });

        var campBlue = L.Icon.extend({
            options: {
                iconUrl: "CAMPBLUEICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var campGreen = L.Icon.extend({
            options: {
                iconUrl: "CAMPGREENICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var campRed = L.Icon.extend({
            options: {
                iconUrl: "CAMPREDICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var campNeutral = L.Icon.extend({
            options: {
                iconUrl: "CAMPNEUTRALICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var castleRed = L.Icon.extend({
            options: {
                iconUrl: "CASTLEREDICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var castleBlue = L.Icon.extend({
            options: {
                iconUrl: "CASTLEBLUEICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var castleNeutral = L.Icon.extend({
            options: {
                iconUrl: "CASTLENEUTRALICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var castleGreen = L.Icon.extend({
            options: {
                iconUrl: "CASTLEGREENICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var towerGreen = L.Icon.extend({
            options: {
                iconUrl: "TOWERGREENICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var towerRed = L.Icon.extend({
            options: {
                iconUrl: "TOWERREDICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var towerBlue = L.Icon.extend({
            options: {
                iconUrl: "TOWERBLUEICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var towerNeutral = L.Icon.extend({
            options: {
                iconUrl: "TOWERNEUTRALICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var waypoint = L.Icon.extend({
            options: {
                iconUrl: "WAYPOINTICONHERE",
                iconSize: [26, 26],
                iconAnchor: [13, 13]
            }
        });

        var commander = L.Icon.extend({
            options: {
                iconUrl: "COMMANDERICONHERE",
                iconSize: [16, 16],
                iconAnchor: [8, 8]
            }
        });

        var hollowBlue = L.Icon.extend({
            options: {
                iconUrl: "HOLLOWBLUEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var hollowRed = L.Icon.extend({
            options: {
                iconUrl: "HOLLOWREDHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var hollowGreen = L.Icon.extend({
            options: {
                iconUrl: "HOLLOWGREENHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var hollowWhite = L.Icon.extend({
            options: {
                iconUrl: "HOLLOWWHITEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var estateBlue = L.Icon.extend({
            options: {
                iconUrl: "ESTATEBLUEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var estateRed = L.Icon.extend({
            options: {
                iconUrl: "ESTATEREDHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var estateGreen = L.Icon.extend({
            options: {
                iconUrl: "ESTATEGREENHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var estateWhite = L.Icon.extend({
            options: {
                iconUrl: "ESTATEWHITEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var ascentBlue = L.Icon.extend({
            options: {
                iconUrl: "ASCENTBLUEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var ascentRed = L.Icon.extend({
            options: {
                iconUrl: "ASCENTREDHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var ascentGreen = L.Icon.extend({
            options: {
                iconUrl: "ASCENTGREENHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var ascentWhite = L.Icon.extend({
            options: {
                iconUrl: "ASCENTWHITEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var overlookBlue = L.Icon.extend({
            options: {
                iconUrl: "OVERLOOKBLUEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var overlookRed = L.Icon.extend({
            options: {
                iconUrl: "OVERLOOKREDHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var overlookGreen = L.Icon.extend({
            options: {
                iconUrl: "OVERLOOKGREENHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var overlookWhite = L.Icon.extend({
            options: {
                iconUrl: "OVERLOOKWHITEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var templeBlue = L.Icon.extend({
            options: {
                iconUrl: "TEMPLEBLUEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var templeRed = L.Icon.extend({
            options: {
                iconUrl: "TEMPLEREDHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var templeGreen = L.Icon.extend({
            options: {
                iconUrl: "TEMPLEGREENHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var templeWhite = L.Icon.extend({
            options: {
                iconUrl: "TEMPLEWHITEHERE",
                iconSize: [26, 26],
                iconAnchor: [8, 8]
            }
        });

        var mPlayerIcon = new playerIcon();
        var mPlayerHavocIcon = new playerHavocIcon();
        var mPlayerScoutIcon = new playerScoutIcon();
        var mmePlayerIcon = new mePlayerIcon();
        var mPlayerRemovedIcon = new playerRemovedIcon();
        var mCampBlue = new campBlue();
        var mCampRed = new campRed();
        var mCampGreen = new campGreen();
        var mCampNeutral = new campNeutral();
        var mTowerBlue = new towerBlue();
        var mTowerRed = new towerRed();
        var mTowerGreen = new towerGreen();
        var mTowerNeutral = new towerNeutral();
        var mCastleBlue = new castleBlue();
        var mCastleRed = new castleRed();
        var mCastleGreen = new castleGreen();
        var mCastleNeutral = new castleNeutral();
        var mWayPoint = new waypoint();
        var mCommander = new commander();

        //Ruin icons
        var mHollowBlue = new hollowBlue();
        var mHollowRed = new hollowRed();
        var mHollowGreen = new hollowGreen();
        var mHollowWhite = new hollowWhite();
        var mEstateBlue = new estateBlue();
        var mEstateRed = new estateRed();
        var mEstateGreen = new estateGreen();
        var mEstateWhite = new estateWhite();
        var mAscentBlue = new ascentBlue();
        var mAscentRed = new ascentRed();
        var mAscentGreen = new ascentGreen();
        var mAscentWhite = new ascentWhite();
        var mOverlookBlue = new overlookBlue();
        var mOverlookRed = new overlookRed();
        var mOverlookGreen = new overlookGreen();
        var mOverlookWhite = new overlookWhite();
        var mTempleBlue = new templeBlue();
        var mTempleRed = new templeRed();
        var mTempleGreen = new templeGreen();
        var mTempleWhite = new templeWhite();


//        function hashdate(str) {
//            if (!str) {
//                var date = new Date();
//                //var str = date.getUTCFullYear() + "/" + (date.getUTCMonth() + 1) + "/" + date.getUTCDate() + " " + (date.getHours() >= 12 ? 'PM' : 'AM');
//                var str = "2014/5/13 PM";
//            };
//            var table = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
//            var crc = crc ^ (-1);
//            for (var i = 0, iTop = str.length; i < iTop; i++) {
//                crc = (crc >>> 8) ^ table[(crc ^ str.charCodeAt(i)) & 0xFF];
//            }
//            return (crc ^ (-1)) >>> 0;
//        };




        function initMap() {
            "use strict";

            var southWest, northEast;

            map = L.map("map", {
                minZoom: 0,
                maxZoom: 6,
                crs: L.CRS.Simple
            }).setView([0, 0], 0);

            southWest = unproject([0, 16384]);
            northEast = unproject([16384, 0]);

            //            southWest = unproject([0, 32768]);
            //            northEast = unproject([32768, 0]);

            map.setMaxBounds(new L.LatLngBounds(southWest, northEast));

            L.tileLayer("https://tiles.guildwars2.com/2/1/{z}/{x}/{y}.jpg", {
                minZoom: 0,
                maxZoom: 6,
                continuousWorld: true
            }).addTo(map);


            map.on("contextmenu", onMapClick);

            $.getJSON("https://api.guildwars2.com/v1/map_floor.json?continent_id=2&floor=1", function (data) {
                var region, gameMap, i, il, poi;

                for (region in data.regions) {
                    region = data.regions[region];
                    for (gameMap in region.maps) {
                        var mapNum = gameMap;
                        gameMap = region.maps[gameMap];
                        mapData[mapNum] = new Object();
                        mapData[mapNum].mData = gameMap;
                        mapData[mapNum].mLeft = gameMap.map_rect[0][0];
                        mapData[mapNum].mTop = gameMap.map_rect[0][1];
                        mapData[mapNum].mWidth = gameMap.map_rect[1][0] - gameMap.map_rect[0][0];
                        mapData[mapNum].mHeight = gameMap.map_rect[1][1] - gameMap.map_rect[0][1];
                        mapData[mapNum].cLeft = gameMap.continent_rect[0][0];
                        mapData[mapNum].cTop = gameMap.continent_rect[0][1];
                        mapData[mapNum].cWidth = gameMap.continent_rect[1][0] - gameMap.continent_rect[0][0];
                        mapData[mapNum].cHeight = gameMap.continent_rect[1][1] - gameMap.continent_rect[0][1];

                        if (region.name == "World vs. World" && mapNum !== "968") {
                            addMarkers("poi", gameMap);
                        }
                    }
                }

                //var myIcon = L.divIcon({ html: '<div style="color:yellow;"></div>' });
                //debugMarker = new L.marker([0, 0], { icon: myIcon });
                //map.addLayer(debugMarker);

                jsobject.StartUpdating();
            });
        }

        function debugWrite(text) {
            var myIcon = L.divIcon({ html: '<div style="color:yellow;margin:-5px 0px 0px 20px;">' + text + '</div>' });
            debugMarker.setIcon(myIcon);
        }

        function SetCenterOnPlayer(Center) {
            centerOnPlayer = Center;
        }

        function ZoomIn() {
            map.zoomIn();
        }

        function CreateMapInfoMarker(MapInfo) {
            var maps = MapInfo.split('|');
            for (var i = 0; i < maps.length; i++) {
                var myIcon = L.divIcon({ className: 'label', iconSize: new L.Point(100, 20), iconAnchor: new L.Point(50, 10), html: '<div style="color:yellow; font-size: 10pt; text-align: center">' + maps[i].split('~')[0] + '</div>' });
                var mapInfoMarker = new L.marker(new L.LatLng(maps[i].split('~')[1], maps[i].split('~')[2]), { icon: myIcon });
                
                mapInfoMarker.zIndexOffset = 1000;
                map.addLayer(mapInfoMarker);
            }
        }

        function CreateRangeMarkerOnPlayer(range) {
            rangeMarkers[range] = new L.CircleMarker(playerMarkers[CurrentPlayerName].getLatLng(), { stroke: false, fillColor: "#FF00FF", fillOpacity: .3 });
            map.addLayer(rangeMarkers[range]);
            var rad = convertMeters(range);
            rangeMarkers[range].setRadius(rad);
            rangeMarkers[range].setLatLng(playerMarkers[CurrentPlayerName].getLatLng());
        }

        function CreateRangeMarker(RangeInfo) {
            var rangeMarkArray = new Array();
            var rangeMark = new L.CircleMarker(new L.LatLng(RangeInfo.split('~')[0], RangeInfo.split('~')[1]), { stroke: false, fillColor: "#C0C0C0", fillOpacity: .5 });
            var rad = convertMeters(RangeInfo.split('~')[2]);
            rangeMark.setRadius(rad);
            map.addLayer(rangeMark);
            rangeMarkArray[0] = RangeInfo.split('~')[2];
            rangeMarkArray[1] = rangeMark;
            siegeRangeMarkers.push(rangeMarkArray);
        }

        function RemoveRangeMarker(range) {
            if (rangeMarkers[range] !== null) {
                map.removeLayer(rangeMarkers[range]);
            }
        }

        function ClearSiegeMarkers() {
            for (var i = siegeRangeMarkers.length - 1; i >= 0; i--) {
                if (siegeRangeMarkers[i] !== null) {
                    map.removeLayer(siegeRangeMarkers[i][1]);
                    siegeRangeMarkers.pop();
                }
            }
        }

        // Get an array of the player's x/y position
        function getPlayerPos(X, Y, PlayerMap) {
            if (map == null || mapData[PlayerMap] == null)
                return;

            playerPos = new Array();
            mapPct = new Array();

            if (mapData[PlayerMap].mWidth == 0 || mapData[PlayerMap].mHeight == 0 || mapData[PlayerMap].cWidth == 0 || mapData[PlayerMap].cHeight == 0) {
                return;
            }

            mapPct[0] = ((X * gameToMapRatio) - mapData[PlayerMap].mLeft) / mapData[PlayerMap].mWidth;
            mapPct[1] = ((Y * gameToMapRatio) - mapData[PlayerMap].mTop) / mapData[PlayerMap].mHeight;


            playerPos[0] = mapData[PlayerMap].cLeft + (mapData[PlayerMap].cWidth * mapPct[0])
            playerPos[1] = (mapData[PlayerMap].cTop + mapData[PlayerMap].cHeight) - (mapData[PlayerMap].cHeight * mapPct[1])

            return playerPos;
        }

        function getMapCenter() {
            mapCenter = new Array();

            mapCenter[0] = -mapData[currentMap].mLeft / mapData[currentMap].mWidth;
            mapCenter[1] = -mapData[currentMap].mTop / mapData[currentMap].mHeight;

            mapCenter[0] = mapData[currentMap].cLeft + (mapData[currentMap].cWidth * mapCenter[0])
            mapCenter[0] = mapData[currentMap].cTop + (mapData[currentMap].cHeight * mapCenter[1])

            return mapCenter;
        }

        function focusRedMap() {
            map.panTo(new L.LatLng(-167.75, 164.125));
        }

        function focusBlueMap() {
            map.panTo(new L.LatLng(-197.5, 220));
        }

        function focusGreenMap() {
            map.panTo(new L.LatLng(-207.75, 107.875));
        }

        function focusEBMap() {
            map.panTo(new L.LatLng(-225.375, 165.375));
        }

        function panToPlayer(PlayerName) {
            try {
                map.panTo(playerMarkers[PlayerName].getLatLng());
            }
            catch (e) {

            }
        }

        function unproject(coord) {
            return map.unproject(coord, map.getMaxZoom());
        }

        function convertMeters(inches) {
            return map.project(new L.LatLng(0, 0), map.getZoom()).y - map.project(new L.LatLng(inches * .0254 / gameToMapRatio, 0), map.getZoom()).y;
        }

        function onMapClick(e) {
            jsobject.ShowContextMenu(e.latlng.lat + "~" + e.latlng.lng);
        }

        function UpdatePlayers(playerdata, currentplayer, rot, commanders) {
            try {
                if (panToCenter) {
                    map.panTo(new L.LatLng(-196, 164));
                    panToCenter = false;
                }
                CurrentPlayerName = currentplayer;
                var playerString = playerdata.split('@')[0];
                var players = playerString.split('|');

                for (var marker in playerMarkers) {
                    playerMarkers[marker].opacity = 0;
                }

                for (var i = 0; i < players.length; i++) {
                    var player = players[i].split('~');
                    if (mapData[player[3]] == null) {
                        if (playerMarkers[player[0]] != null) {
                            playerMarkers[player[0]].setIcon(mPlayerRemovedIcon);
                        }
                    }
                    else {
                        var PlayerPos = getPlayerPos(player[1], player[2], player[3]);
                        if (playerMarkers[player[0]] == null) {
                            if (player[0] == currentplayer) {
                                playerMarkers[player[0]] = L.marker(unproject([PlayerPos[0], PlayerPos[1]]), { icon: mmePlayerIcon, title: player[0] });
                                if (centerOnPlayer) {
                                    map.panTo(playerMarkers[currentplayer].getLatLng());
                                }
                            }
                            else {
                                if (commanders.indexOf('~' + player[0] + '~') !== -1) {
                                    playerMarkers[player[0]] = L.marker(unproject([PlayerPos[0], PlayerPos[1]]), { icon: mCommander, title: player[0] });
                                }
                                else {
                                    playerMarkers[player[0]] = L.marker(unproject([PlayerPos[0], PlayerPos[1]]), { icon: GetPlayerIcon(player[4]), title: player[0] });
                                }
                            }

                            map.addLayer(playerMarkers[player[0]]);
                        }
                        playerMarkers[player[0]].opacity = 1;
                        if (player[0] == currentplayer) {
                            playerMarkers[player[0]].setIcon(mmePlayerIcon);
                            if (centerOnPlayer) {
                                map.panTo(playerMarkers[currentplayer].getLatLng());
                            }
                        }
                        else {
                            if (commanders.indexOf('~' + player[0] + '~') !== -1) {
                                playerMarkers[player[0]].setIcon(mCommander);
                            }
                            else {
                                playerMarkers[player[0]].setIcon(GetPlayerIcon(player[4]));
                            }

                        }
                        playerMarkers[player[0]].setLatLng(unproject([PlayerPos[0], PlayerPos[1]]));
                        if (player[0] == currentplayer) {
                            //document.write(rot + '    ');
                            playerMarkers[player[0]]._icon.style[L.DomUtil.TRANSFORM] += ' rotate(-' + rot + 'deg)';
                        }

                    }
                }
                for (var marker in playerMarkers) {
                    if (playerMarkers[marker].opacity == 0) {
                        playerMarkers[marker].setIcon(mPlayerRemovedIcon);
                    }
                }

                var objectiveString = playerdata.split('@')[1];
                UpdateObjectiveMarkers(objectiveString);

                for (var item in rangeMarkers) {
                    var rad = convertMeters(item);
                    rangeMarkers[item].setRadius(rad);
                }

                for (var i = 0; i < siegeRangeMarkers.length; i++) {
                    if (siegeRangeMarkers[i] !== null) {
                        rad = convertMeters(siegeRangeMarkers[i][0]);
                        siegeRangeMarkers[i][1].setRadius(rad);
                    }
                }
            }
            catch (e) {

            }
        }

        function GetPlayerIcon(playerstatus) {
            if (playerstatus == 'h') {
                return mPlayerHavocIcon;
            }
            else if (playerstatus == 's') {
                return mPlayerScoutIcon;
            }
            else {
                return mPlayerIcon;
            }
        }

        function UpdateObjectiveMarkers(ObjectiveData) {
            objectives = ObjectiveData.split("|");
            for (i = 0; i < objectives.length; i++) {
                obj = objectives[i].split("~");
                if (typeof objectiveMarkers[obj[0]] !== 'undefined') {
                    //Update Timers
                    if (typeof timerMarkers[obj[0]] !== 'undefined') {
                        try {
                            if (obj[3] !== '-1') {
                                //var myIcon = L.divIcon({ html: '<div style="color:yellow;margin:-5px 0px 0px 20px;">' + obj[3] + '</div>' });
                                //timerMarkers[obj[0]].setIcon(myIcon);
                                if (timerMarkerIcons[obj[0]] !== null) {
                                    timerMarkerIcons[obj[0]] = L.divIcon({ html: '<div style="color:yellow;margin:-5px 0px 0px 20px;">' + obj[3] + '</div>' });
                                    timerMarkers[obj[0]].setIcon(timerMarkerIcons[obj[0]]);
                                }

                            }
                            else {
                                //var myIcon = L.divIcon({ html: '<div style="color:yellow;margin:-5px 0px 0px 20px;"></div>' });
                                //timerMarkers[obj[0]].setIcon(myIcon);

                                if (timerMarkerIcons[obj[0]] !== null) {
                                    timerMarkerIcons[obj[0]] = L.divIcon({ html: '<div style="color:yellow;margin:-5px 0px 0px 20px;"></div>' });
                                    timerMarkers[obj[0]].setIcon(timerMarkerIcons[obj[0]]);
                                }
                            }


                        }
                        catch (e) {
                            document.write(obj[0] + e.message);
                        }

                    }

                    //Update Icons
                    if (obj[1] == "c") {
                        try {
                            if (obj[2] == "r") {
                                objectiveMarkers[obj[0]].setIcon(mCampRed);
                            }
                            else if (obj[2] == "b") {
                                objectiveMarkers[obj[0]].setIcon(mCampBlue);
                            }
                            else if (obj[2] == "g") {

                                objectiveMarkers[obj[0]].setIcon(mCampGreen);
                            }
                        }
                        catch (e) {
                            //document.write('<p>' + e.message + '      ' + obj[0] + '</p>');
                        }
                    }
                    else if (obj[1] == "t") {
                        try {
                            if (obj[2] == "r") {
                                objectiveMarkers[obj[0]].setIcon(mTowerRed);
                            }
                            else if (obj[2] == "b") {
                                objectiveMarkers[obj[0]].setIcon(mTowerBlue);
                            }
                            else if (obj[2] == "g") {
                                objectiveMarkers[obj[0]].setIcon(mTowerGreen);
                            }
                        }
                        catch (e) {
                            //document.write('<p>' + e.message + '      ' + obj[0] + '</p>');
                        }
                    }
                    else if (obj[1] == "k") {
                        try {
                            if (obj[2] == "r") {
                                objectiveMarkers[obj[0]].setIcon(mCastleRed);
                            }
                            else if (obj[2] == "b") {
                                objectiveMarkers[obj[0]].setIcon(mCastleBlue);
                            }
                            else if (obj[2] == "g") {
                                objectiveMarkers[obj[0]].setIcon(mCastleGreen);
                            }
                        }
                        catch (e) {
                            //document.write('<p>' + e.message + '      ' + obj[0] + '</p>');
                        }
                    }
                    //                    else if (obj[1] == "h") {
                    //                        try {
                    //                            if (obj[2] == "r") {
                    //                                objectiveMarkers[obj[0]].setIcon(mHollowRed);
                    //                            }
                    //                            else if (obj[2] == "b") {
                    //                                objectiveMarkers[obj[0]].setIcon(mHollowBlue);
                    //                            }
                    //                            else if (obj[2] == "g") {
                    //                                objectiveMarkers[obj[0]].setIcon(mHollowGreen);
                    //                            }
                    //                        }
                    //                        catch (e) {
                    //                            //document.write('<p>' + e.message + '      ' + obj[0] + '</p>');
                    //                        }
                    //                    }
                    //                    else if (obj[1] == "e") {
                    //                        try {
                    //                            if (obj[2] == "r") {
                    //                                objectiveMarkers[obj[0]].setIcon(mEstateRed);
                    //                            }
                    //                            else if (obj[2] == "b") {
                    //                                objectiveMarkers[obj[0]].setIcon(mEstateBlue);
                    //                            }
                    //                            else if (obj[2] == "g") {
                    //                                objectiveMarkers[obj[0]].setIcon(mEstateGreen);
                    //                            }
                    //                        }
                    //                        catch (e) {
                    //                            //document.write('<p>' + e.message + '      ' + obj[0] + '</p>');
                    //                        }
                    //                    }
                    //                    else if (obj[1] == "a") {
                    //                        try {
                    //                            if (obj[2] == "r") {
                    //                                objectiveMarkers[obj[0]].setIcon(mAscentRed);
                    //                            }
                    //                            else if (obj[2] == "b") {
                    //                                objectiveMarkers[obj[0]].setIcon(mAscentBlue);
                    //                            }
                    //                            else if (obj[2] == "g") {
                    //                                objectiveMarkers[obj[0]].setIcon(mAscentGreen);
                    //                            }
                    //                        }
                    //                        catch (e) {
                    //                            //document.write('<p>' + e.message + '      ' + obj[0] + '</p>');
                    //                        }
                    //                    }
                    //                    else if (obj[1] == "o") {
                    //                        try {
                    //                            if (obj[2] == "r") {
                    //                                objectiveMarkers[obj[0]].setIcon(mOverlookRed);
                    //                            }
                    //                            else if (obj[2] == "b") {
                    //                                objectiveMarkers[obj[0]].setIcon(mOverlookBlue);
                    //                            }
                    //                            else if (obj[2] == "g") {
                    //                                objectiveMarkers[obj[0]].setIcon(mOverlookGreen);
                    //                            }
                    //                        }
                    //                        catch (e) {
                    //                            //document.write('<p>' + e.message + '      ' + obj[0] + '</p>');
                    //                        }
                    //                    }



                }
            }
        }

        function addMarkers(markerType, mData) {
            if (map == null)
                return;

            // mData = mapData[currentMap].mData;
            var marker;

            if (markerType == "waypoint") {
                for (i = 0, il = mData.points_of_interest.length; i < il; i++) {
                    if (mData.points_of_interest[i].type == "waypoint") {
                        waypointMarkers[mData.points_of_interest[i].name] = new L.Marker(unproject(mData.points_of_interest[i].coord), { icon: mWayPoint, title: mData.points_of_interest[i].name });
                        map.addLayer(waypointMarkers[mData.points_of_interest[i].name]);
                    }
                }

            }
            else if (markerType == "sector") {
                for (i = 0, il = mData.sectors.length; i < il; i++) {
                    var poiName = mData.sectors[i].name;

                    if (poiName !== " Hill" && poiName !== " Border" && poiName !== "Molevekian Delve" && poiName !== "Zraith's Beacon" && poiName !== "Darkrait Inlet" && poiName !== "Tranquilvale Oasis" && poiName !== "Gattchaki Scratch" && poiName !== "Blazeclaw Crag" && poiName !== "Calmbasin Oasis" && poiName !== "Tikitecki Scratch" && poiName !== "Emberfang Crag" && poiName !== "Rektakki Scratch" && poiName !== "Pyrescale Crag" && poiName !== "Verdantdale Oasis" && poiName !== " Citadel" && poiName !== "Orgath Uplands") {
                        objectiveMarkers[poiName] = new L.Marker(unproject(mData.sectors[i].coord), { icon: mCampNeutral, title: mData.sectors[i].name });
                        map.addLayer(objectiveMarkers[mData.sectors[i].name]);

                        var myIcon = L.divIcon({ className: 'label', html: '<div style="color:yellow;"></div>' });
                        var timerPos = unproject([mData.sectors[i].coord[0], mData.sectors[i].coord[1]]);
                        timerMarkers[poiName] = new L.marker(timerPos, { icon: myIcon });
                        map.addLayer(timerMarkers[poiName]);
                    }
                }
            }
            else if (markerType == "poi") {
                //objectiveMarkers[currentMap].POIs = new Array();
                for (i = 0, il = mData.points_of_interest.length; i < il; i++) {
                    if (mData.points_of_interest[i].type == "landmark") {
                        if (mData.points_of_interest[i].poi_id == "1011") {
                            objectiveMarkers["Lowlands"] = new L.Marker(unproject(mData.points_of_interest[i].coord), { icon: mCastleNeutral, title: "Lowlands" });
                            map.addLayer(objectiveMarkers["Lowlands"]);

                            var myIcon = L.divIcon({ className: 'label', html: '<div style="color:yellow;"></div>' });
                            timerMarkers["Lowlands"] = new L.marker(unproject(mData.points_of_interest[i].coord), { icon: myIcon });
                            map.addLayer(timerMarkers["Lowlands"]);
                        }
                        else if (mData.points_of_interest[i].poi_id == "1003") {
                            objectiveMarkers["Overlook"] = new L.Marker(unproject(mData.points_of_interest[i].coord), { icon: mCastleNeutral, title: "Overlook" });
                            map.addLayer(objectiveMarkers["Overlook"]);

                            var myIcon = L.divIcon({ className: 'label', html: '<div style="color:yellow;"></div>' });
                            timerMarkers["Overlook"] = new L.marker(unproject(mData.points_of_interest[i].coord), { icon: myIcon });
                            map.addLayer(timerMarkers["Overlook"]);
                        }
                        else if (mData.points_of_interest[i].poi_id == "994") {
                            objectiveMarkers["Valley"] = new L.Marker(unproject(mData.points_of_interest[i].coord), { icon: mCastleNeutral, title: "Valley" });
                            map.addLayer(objectiveMarkers["Valley"]);

                            var myIcon = L.divIcon({ className: 'label', html: '<div style="color:yellow;"></div>' });
                            timerMarkers["Valley"] = new L.marker(unproject(mData.points_of_interest[i].coord), { icon: myIcon });
                            map.addLayer(timerMarkers["Valley"]);
                        }
                        else if (mData.points_of_interest[i].poi_id == "1330") {
                            objectiveMarkers["Green Garrison"] = new L.Marker(unproject(mData.points_of_interest[i].coord), { icon: mCastleNeutral, title: "Green Garrison" });
                            map.addLayer(objectiveMarkers["Green Garrison"]);

                            var myIcon = L.divIcon({ className: 'label', html: '<div style="color:yellow;"></div>' });
                            timerMarkers["Green Garrison"] = new L.marker(unproject(mData.points_of_interest[i].coord), { icon: myIcon });
                            map.addLayer(timerMarkers["Green Garrison"]);
                        }
                        else if (mData.points_of_interest[i].poi_id == "1302") {
                            objectiveMarkers["Red Garrison"] = new L.Marker(unproject(mData.points_of_interest[i].coord), { icon: mCastleNeutral, title: "Red Garrison" });
                            map.addLayer(objectiveMarkers["Red Garrison"]);

                            var myIcon = L.divIcon({ className: 'label', html: '<div style="color:yellow;"></div>' });
                            timerMarkers["Red Garrison"] = new L.marker(unproject(mData.points_of_interest[i].coord), { icon: myIcon });
                            map.addLayer(timerMarkers["Red Garrison"]);
                        }
                        else if (mData.points_of_interest[i].poi_id == "1316") {
                            objectiveMarkers["Blue Garrison"] = new L.Marker(unproject(mData.points_of_interest[i].coord), { icon: mCastleNeutral, title: "Blue Garrison" });
                            map.addLayer(objectiveMarkers["Blue Garrison"]);

                            var myIcon = L.divIcon({ className: 'label', html: '<div style="color:yellow;"></div>' });
                            timerMarkers["Blue Garrison"] = new L.marker(unproject(mData.points_of_interest[i].coord), { icon: myIcon });
                            map.addLayer(timerMarkers["Blue Garrison"]);
                        }
                        else if (mData.points_of_interest[i].poi_id == "1296" || mData.points_of_interest[i].poi_id == "1332" || mData.points_of_interest[i].poi_id == "1314") {
                            //                            var color = "Red";
                            //                            if (mData.points_of_interest[i].poi_id == "1332") {
                            //                                color = "Green"
                            //                            }
                            //                            else if (mData.points_of_interest[i].poi_id == "1314") {
                            //                                color = "Blue"
                            //                            }

                            //                            var basePoint = unproject(mData.points_of_interest[i].coord);
                            //                            basePoint.lat = basePoint.lat + .33;
                            //                            objectiveMarkers[color + " Battle's Hollow"] = new L.Marker(basePoint, { icon: mHollowWhite, title: color + " Battle's Hollow" });
                            //                            map.addLayer(objectiveMarkers[color + " Battle's Hollow"]);

                            //                            objectiveMarkers[color + " Temple of Lost Prayers"] = new L.Marker([basePoint.lat - 4.3125, basePoint.lng + 4.875], { icon: mTempleWhite, title: color + " Temple of Lost Prayers" });
                            //                            map.addLayer(objectiveMarkers[color + " Temple of Lost Prayers"]);

                            //                            objectiveMarkers[color + " Carver's Ascent"] = new L.Marker([basePoint.lat - .8125, basePoint.lng + 9.5313], { icon: mAscentWhite, title: color + " Carver's Ascent" });
                            //                            map.addLayer(objectiveMarkers[color + " Carver's Ascent"]);

                            //                            objectiveMarkers[color + " Orchard Overlook"] = new L.Marker([basePoint.lat + 4.7188, basePoint.lng + 9.0313], { icon: mOverlookWhite, title: color + " Orchard Overlook" });
                            //                            map.addLayer(objectiveMarkers[color + " Orchard Overlook"]);

                            //                            objectiveMarkers[color + " Bauer's Estate"] = new L.Marker([basePoint.lat + 5.5313, basePoint.lng + 1.6875], { icon: mEstateWhite, title: color + " Bauer's Estate" });
                            //                            map.addLayer(objectiveMarkers[color + " Bauer's Estate"]);
                        }
                        else {
                            var poiName = mData.points_of_interest[i].name
                            if (poiName.indexOf(" ") > -1 && poiName.charAt(0) != " ") {
                                var words = poiName.split(" ");
                                poiName = words[0];
                            }

                            if (poiName !== "Great" && poiName !== "Dragoss" && poiName !== "Novotl" && poiName !== "Molevek" &&
                                poiName !== "Temple" && poiName !== "Blackwicker" && poiName !== "Chitaritta" && poiName !== "Temple" &&
                                poiName !== "Eboneigh" && poiName !== "Nueskrittia" && poiName !== "Temple" && poiName !== "Brownmane" && 
                                poiName !== "Chitterogg" && poiName !== "Gattchaki" &&poiName !== "Blazeclaw" && poiName !== "Tranquilvale" &&
                                poiName !== "Tikitecki" && poiName !== "Emberfang" && poiName !== "Calmbasin" && poiName !== "Rektakki" && poiName !== "Pyrescale" && poiName !== "Verdantdale") {

                                objectiveMarkers[poiName] = new L.Marker(unproject(mData.points_of_interest[i].coord), { icon: mCampNeutral, title: poiName });
                                map.addLayer(objectiveMarkers[poiName]);

                                var myIcon = L.divIcon({ className: 'label', html: '<div style="color:yellow;"></div>' });
                                var timerPos = unproject([mData.points_of_interest[i].coord[0], mData.points_of_interest[i].coord[1]]);
                                timerMarkers[poiName] = new L.marker(timerPos, { icon: myIcon });
                                map.addLayer(timerMarkers[poiName]);
                            }
                        }
                    }
                }


            }

        }

    </script>
</head>
<body onload="initMap()">
    <div id="map" />
</body>
</html>
